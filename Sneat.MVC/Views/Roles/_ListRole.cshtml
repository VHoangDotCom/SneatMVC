@using Sneat.MVC.Models.DTO.Role;
@using PagedList;
@using PagedList.Mvc;
@model IPagedList<RoleOutputModel>


<table class="table table-bordered table-striped text-center" id="dataTable" cellspacing="0">
    <thead>
        <tr>
            <th>STT</th>
            <th>Tên </th>
            <th>Phân quyền </th>
            <th>Ngày tạo</th>
            <th>Action</th>
        </tr>
    </thead>

    <tbody>

        @{
            if (Model.Count() <= 0)
            {
                <tr>
                    <td colspan="8">Không có dữ liệu.</td>
                </tr>
            }
            else
            {

                int stt = ((Model.PageNumber - 1) * Model.PageSize) + 1;
                foreach (var data in Model)
                {

                    <tr>
                        <td>@stt </td>
                        <td>@data.Name</td>
                        <td> </td>
                        <td>@data.CreatedDate.ToString("dd/MM/yyyy")</td>
                        <td>
                            <div class="dropdown">
                                <button type="button"
                                        class="btn p-0 dropdown-toggle hide-arrow"
                                        data-bs-toggle="dropdown">
                                    <i class="bx bx-dots-vertical-rounded"></i>
                                </button>
                                <div class="dropdown-menu">
                                    <a class="dropdown-item" data-bs-toggle="modal" data-bs-target="#updateRoleModal" onclick="updateRole(@data.ID)"><i class="bx bx-edit-alt me-1"></i> Sửa tài khoản</a>
                                    <a class="dropdown-item" onclick="deleteUser(@data.ID)"><i class="bx bx-trash me-1"></i> Xóa tài khoản</a>
                                </div>
                            </div>
                        </td>
                    </tr>
                    stt++;

                }
            }
        }

    </tbody>
</table>
<div class="col-md-12">
    <div class="row float-right">
        @*phân trang*@
        @Html.PagedListPager(Model, Page => Url.Action("SearchRole", new { Page, search = "" }),
                 PagedListRenderOptions.EnableUnobtrusiveAjaxReplacing(new AjaxOptions()
                 {
                     HttpMethod = "GET",
                     UpdateTargetId = "list_role"
                 })
                 )
    </div>
</div>

<script>
    $(document).ready(function () {
        $('#dataTable').dataTable({
            "bPaginate": false,
            "bProcessing": true,
            "bInfo": false,
            "bFilter": false,
        });
            });

    function updateRole(id) {
        $.ajax({
            url: '/Roles/DetailRole',
            type: 'GET',
            data: { id: id },
            beforeSend: function () {
                $("#listPermissonIds").val("");
            },
            success: function (res) {
                $("#nameEdit").val(res.Name);
                $("#txtDescriptionEdit").val(res.Description);
                $("#listPermissonIds").val(res.PermissionIDs);

                var theme = $('html').hasClass('light-style') ? 'default' : 'default-dark',
                    checkboxTreeUpdate = $('#update-tree-role');

                // List tree for updating
                if (checkboxTreeUpdate.length) {
                    $.ajax({
                        url: '/Roles/GetAllPermissions',
                        method: 'GET',
                        success: function (data) {
                            var jsTreeData = transformToJsTreeFormatUpdate(data);
                            initializeJsTree(jsTreeData);
                        },
                        error: function (error) {
                            console.error('Error fetching permissions:', error);
                        }
                    });
                }

                function transformToJsTreeFormatUpdate(data) {
                    var listIds = $("#listPermissonIds").val();// 1,2,3,4,5
                    var preSelectedIds = listIds.split(',').map(Number);// [1, 2, 3, 4, 5]
                    function transformNode(node) {
                        return {
                            id: node.Item.ID,
                            text: node.Item.Name,
                            children: node.Children ? node.Children.map(transformNode) : [],
                            state: {
                                opened: true,
                                selected: preSelectedIds.includes(node.Item.ID)
                            },
                            type: node.Item.TabIcon,//not work
                        };
                    }

                    return {
                        id: data.Id,
                        text: data.Name,
                        children: data.Childrens ? data.Childrens.map(transformNode) : [],
                        state: {
                            opened: true
                        }
                    };
                }

                function initializeJsTree(data) {
                    checkboxTreeUpdate.jstree({
                        core: {
                            themes: {
                                name: theme
                            },
                            data: [data]
                        },
                        plugins: ['types', 'checkbox', 'wholerow'],
                        types: {
                            default: {
                                icon: 'bx bxl-stripe text-primary'
                            },
                            user: {
                                icon: 'bx bx-user text-secondary'
                            },
                            home: {
                                icon: 'bx bx-home-circle text-info'
                            }
                        }
                    });
                }
            }
        })
    }
</script>
